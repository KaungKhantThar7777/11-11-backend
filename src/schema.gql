# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  email: String!
  password: String!
  phone_number: String!
  department: Department!
  role: UserRole!
  member_id: String!
  appointments: [Appointment!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum Department {
  EsdCounselling
  EsdMeditation
  EsdYoga
  Media
  Research
  PrCommunity
  OrganizerSupport
}

enum UserRole {
  leader
  coleader
  officer
  member
}

type Appointment {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  isTaken: Boolean!
  session: Int
  day: String
  reasons: String!
  chronicIllness: String!
  patient: Patient!
  counsellor: User
}

type Patient {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  facebook_name: String!
  phone_number: String!
  email: String!
  hasExperience: Boolean!
  age: Int!
  gender: String!
  religion: String!
  educationBusiness: String!
  maritalStatus: String!
  haveChild: Boolean!
  childrenCount: Int
  emergencyPerson: String
  emergencyPhone: String
  emergencyRelationship: String
  appointments: [Appointment!]!
  instructions: String
  notes: String
}

type GetAppointmentsResult {
  ok: Boolean!
  error: String
  appointments: [Appointment!]!
  hasMore: Boolean!
}

type CreateAppointmentResult {
  ok: Boolean!
  error: String
  appointment: Appointment
}

type AssignAppointmentResult {
  ok: Boolean!
  error: String
}

type GetUserByIdResult {
  ok: Boolean!
  error: String
  user: User
}

type GetUsersResult {
  ok: Boolean!
  error: String
  users: [User!]!
}

type LoginResult {
  ok: Boolean!
  error: String
  token: String
  id: Int
  expiresIn: DateTime
}

type MeResult {
  ok: Boolean!
  error: String
  user: User!
}

type SignUpResult {
  ok: Boolean!
  error: String
  token: String
  id: Int
  expiresIn: DateTime
}

type CreatePatientResult {
  ok: Boolean!
  error: String
  id: String!
}

type GetPatientByIdResult {
  ok: Boolean!
  error: String
  patient: Patient
}

type GetPatientsResult {
  ok: Boolean!
  error: String
  patients: [Patient!]!
  hasMore: Boolean!
}

type SaveInstructionResult {
  ok: Boolean!
  error: String
  patient: Patient!
}

type SaveNotesResult {
  ok: Boolean!
  error: String
  patient: Patient!
}

type Query {
  getPatients(input: GetPatientsInput!): GetPatientsResult!
  getPatientById(input: GetPatientByIdInput!): GetPatientByIdResult!
  getAppointments(input: GetAppointmentsInput!): GetAppointmentsResult!
  getUserById(input: GetUserByIdInput!): GetUserByIdResult!
  getUsersByDepartment(input: GetUsersInput!): GetUsersResult!
  me: MeResult!
}

input GetPatientsInput {
  offset: Int!
  size: Int!
}

input GetPatientByIdInput {
  id: Int!
}

input GetAppointmentsInput {
  offset: Int!
  size: Int!
}

input GetUserByIdInput {
  id: Int!
}

input GetUsersInput {
  department: Department!
}

type Mutation {
  createPatient(input: CreatePatientInput!): CreatePatientResult!
  saveInstructions(input: SaveInstructionInput!): SaveInstructionResult!
  saveNotes(input: SaveNotesInput!): SaveNotesResult!
  createAppointment(input: CreateAppointmentInput!): CreateAppointmentResult!
  assignAppointment(input: AssignAppointmentInput!): AssignAppointmentResult!
  signup(input: SignUpInput!): SignUpResult!
  login(input: LoginInput!): LoginResult!
}

input CreatePatientInput {
  name: String!
  facebook_name: String!
  phone_number: String!
  email: String!
  hasExperience: Boolean!
  age: Int!
  gender: String!
  religion: String!
  educationBusiness: String!
  maritalStatus: String!
  haveChild: Boolean!
  childrenCount: Int
  emergencyPerson: String
  emergencyPhone: String
  emergencyRelationship: String
  instructions: String
  notes: String
}

input SaveInstructionInput {
  patientId: Int!
  instructions: String!
}

input SaveNotesInput {
  patientId: Int!
  notes: String!
}

input CreateAppointmentInput {
  reasons: String!
  chronicIllness: String!
  emailOrId: String!
}

input AssignAppointmentInput {
  appointmentId: Int!
  userId: Int!
  session: Int!
  day: String!
}

input SignUpInput {
  username: String!
  email: String!
  password: String!
  phone_number: String!
  department: Department!
  role: UserRole!
  member_id: String!
}

input LoginInput {
  email: String!
  password: String!
}

type Subscription {
  newAppointment: Appointment!
}
